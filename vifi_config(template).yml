user_conf:  # Key names used in any conf.json file
  ############ GENERAL PARAMETERS ###############
  conf_file_name: conf.yml  # Name of configuration file that should exist in any user request
  userid_kye: userid       # Key for User ID
  total_inputs_key: total_inputs     # Key for all uploaded user input files and folders to this server
  main_scripts_key: main_scripts     # Key for user scripts that will execute inside docker swarm. Main scripts are also included in the total_inputs
  result_files_key: result_files     # Key for output files
  s3_transfer_key: s3_transfer     # Key to define whether to upload output files to S3 bucket or not
  s3_buc_key: s3_buc       # Key for S3 bucket
  s3_loc_under_userid_key: s3_loc_under_userid # Key for S3 location under userid folder in specified S3 bucket
  ser_check_thr_key: ser_check_thr   # Key for user defined time for executing main scripts
  docker_img_key: docker_img     # Key for Docker image to execute scripts (e.g., python docker image)
  docker_cmd_eng_key: docker_cmd_eng   # Key for command to run main script(s) insdie docker swarm (e.g., python <script_name>)
  docker_rep_key: docker_rep     # Key for number of docker tasks. Useful for parallelization.
  data_dir_container_key: data_dir_container # Key for data location inside each docker task

############ PROMETHEUS PARAMETERS #################
Prometheus_parameters:
  uname: admin         # Prometheus default user name
  upass: admin         # Prometheus default user password
  prometheus_url: http://localhost:9090/api/v1/  # Prometheus default API url
  query_step: 15         # Steps between consecutive queries time series (Default is 15 sec)
  metrics_names_f: 'metrics_names.out'   # Default output file to record metrics names
  metrics_names_path: '/home/ubuntu/poc_scripts/analysis'      # Default path to store @metrics_names_f
  metrics_values_f: ''       # Default output file to record metrics values
  metrics_values_path: '/home/ubuntu/poc_scripts/analysis'    # Default path to store @metrics_values_f
  write_metrics: True        # If set, write metrics values to @metrics_values_path/@metrics_values_f 
  
############ LOGGING PARAMETERS #################
vifi_log: '/home/ubuntu/requests/logs/vifi_log.out'
req_log_path: '/home/ubuntu/requests/logs' 

########## SUPPORTED COMPRESSED TYPES ############
compressed: 
- zip
  
######## GENERAL PARAMETERS (PATH PARAMETERS FOR INPUT SCRIPTS, OUTPUT DIRECTORIES FOR EACH DOMAIN) #################
domains: 
 proc_int: 1  # Time interval in seconds between each processing cycle of input requests
 unpack_int: 1   # Time interval in seconds between each unpacking cycle of input requests
 root_script_path: # Root directory that contains separate directory for each domains
   name: /home/ubuntu/requests
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 script_path_in: # Sub-folder within domain directory to keep incoming requests 
   name: in
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 script_path_out:  # Sub-folder within domain directory to keep results of successful requests (i.e., to locally store results)
   name: finished
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 script_path_failed: # Sub-folder within domain directory to keep failed requests
   name: failed
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 log_path: # Sub-folder within domain directory to keep logs. Useful to check status
   name: log
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 req_res_path_per_request: # Sub-folder within each request to store results. The folder can be removed after processing
   name: results
   mode: 0o777
   exist_ok: True  # If true, use alrady existing folder if one does
 sets:   # Each workflow has a sub folder under the @root_script_path
   JPL:
     name: jpl
     mode: 0o777
     nifi: 
      transfer: True
      host: 'http://localhost:8090/nifi-api'
      registry: 'http://localhost:18080/nifi-registry-api'
     exist_ok: True  # If true, use alrady existing folder if one does
     terminate: 0 # Specifies the time to wait before removing any service (after request processing). If '0', then any created service is removed directly after processing. If 'inf', then the service can wait forever. Otherwise, the service will remain for the spcified amount of time, then removed.
     set_function: # Function to use to process any request under current set. Thus, changing default request processing behavior (default bahavior is to keep incoming request, process them as containerized applications in a cluster, then transfer results to required destinations)
     data_dir:   # Result from data management layer
      data_GPM: 
       path: "/home/ubuntu/data_GPM"
       schema: # TODO: May be important for data management. This node can point to other nodes (or document files) that contain detailed description of schema
       keywords: # TODO: May be important for data management and search for related data
     docker:         # Docker parameters for specific workflow
       docker_img:  #TODO: This can be a list of allowed images to run within this set. In this case, the user can select any of the allowed images, but nothing else, which may be important for security reasons (e.g., the institution is concerned with the images running at its side). If "any" is in the list, this means that the end user can select any image 
        'shambakey1/ocw_docker' :
         registery: "https://hub.docker.com/r/shambakey1/ocw_docker/"
       docker_rep: "any" # User can change number of containers if @docker_rep is 'any' or greater than number of containers required by end-user
       climate_dir: "/home/ubuntu/climate"
       climate_dir_container: "/climate"
       ttl: 300  # If 'any', then user can specify whatever value. Otherwise, user specified value should not exceed this value
       user: 1000 # User to run docker commands as
       groups:        # List of groups that the container process will run as
       - 1000
   JPL_cordex:
     name: jpl_cordex
     mode: 0o777
     nifi: 
      transfer: True
      host: 'http://localhost:8090/nifi-api'
      registry: 'http://localhost:18080/nifi-registry-api'
     exist_ok: True  # If true, use alrady existing folder if one does
     terminate: inf # Specifies the time to wait before removing any service (after request processing). If '0', then any created service is removed directly after processing. If 'inf', then the service can wait forever. Otherwise, the service will remain for the spcified amount of time, then removed.
     set_function: # Function to use to process any request under current set. Thus, changing default request processing behavior (default bahavior is to keep incoming request, process them as containerized applications in a cluster, then transfer results to required destinations)
     data_dir: # Result from data management layer
      NAM-44:  
       path: "/home/ubuntu/NAM-44"
       schema: # TODO: May be important for data management. This node can point to other nodes (or document files) that contain detailed description of schema
       keywords: # TODO: May be important for data management and search for related data
      obs4mips: 
       path: "/home/ubuntu/obs4mips"
       schema: # TODO: May be important for data management. This node can point to other nodes (or document files) that contain detailed description of schema
       keywords: # TODO: May be important for data management and search for related data
     docker:         # Docker parameters for specific workflow
       docker_img:  #TODO: This can be a list of allowed images to run within this set. In this case, the user can select any of the allowed images, but nothing else, which may be important for security reasons (e.g., the institution is concerned with the images running at its side). If "any" is the first value in the list, this means that the end user can select any image 
        'shambakey1/ocw_cordex' :
         registery: "https://hub.docker.com/r/shambakey1/ocw_cordex/"
       docker_rep: "any"
       ttl: 3600  # If 'any', then user can specify whatever value. Otherwise, user specified value should not exceed this value
       user: 1000 # User to run docker commands as
       groups:        # List of groups that the container process will run as
       - 1000
   AST:
     name: ast
     mode: 0o777
     nifi: 
      transfer: True
      host: 'http://localhost:8090/nifi-api'
      registry: 'http://localhost:18080/nifi-registry-api'
     exist_ok: True  # If true, use alrady existing folder if one does
     terminate: 0 # Specifies the time to wait before removing any service (after request processing). If '0', then any created service is removed directly after processing. If 'inf', then the service can wait forever. Otherwise, the service will remain for the spcified amount of time, then removed.
     set_function: # Function to use to process any request under current set. Thus, changing default request processing behavior (default bahavior is to keep incoming request, process them as containerized applications in a cluster, then transfer results to required destinations)
     data_dir: # Result from data management layer
     docker:         # Docker parameters for this specific workflow
       docker_img:  #TODO: This can be a list of allowed images to run within this set. In this case, the user can select any of the allowed images, but nothing else, which may be important for security reasons (e.g., the institution is concerned with the images running at its side). If "any" is the first value in the list, this means that the end user can select any image 
        'shambakey1/python' : 
         registery: "https://hub.docker.com/r/shambakey1/python/"
       docker_rep: "any"
       ttl: 300  # If 'any', then user can specify whatever value. Otherwise, user specified value should not exceed this value
       user: 1000 # User to run docker commands as
       groups:        # List of groups that the container process will run as
       - 1000
   SHBE:
     name: shbe
     mode: 0o777
     nifi: 
      transfer: True
      host: 'http://localhost:8090/nifi-api'
      registry: 'http://localhost:18080/nifi-registry-api'
     exist_ok: True  # If true, use alrady existing folder if one does
     terminate: 0 # Specifies the time to wait before removing any service (after request processing). If '0', then any created service is removed directly after processing. If 'inf', then the service can wait forever. Otherwise, the service will remain for the spcified amount of time, then removed.
     set_function: # Function to use to process any request under current set. Thus, changing default request processing behavior (default bahavior is to keep incoming request, process them as containerized applications in a cluster, then transfer results to required destinations)
     data_dir: # Result from data management layer
      data_CMU: 
       path: "/home/ubuntu/data_CMU"
       schema: # TODO: May be important for data management. This node can point to other nodes (or document files) that contain detailed description of schema
       keywords: # TODO: May be important for data management and search for related data
     docker:         # Docker parameters for this specific workflow
       docker_img: 
        'shambakey1/python' : 
         registery: "https://hub.docker.com/r/shambakey1/python/"
       docker_rep: "any"
       ttl: 300  # If 'any', then user can specify whatever value. Otherwise, user specified value should not exceed this value
       user: 1000 # User to run docker commands as
       groups:        # List of groups that the container process will run as
       - 1000
   transferlearning1:
     name: transferlearning1
     mode: 0o777
     nifi: 
      transfer: True
      host: 'http://localhost:8090/nifi-api'
      registry: 'http://localhost:18080/nifi-registry-api'
     exist_ok: True  # If true, use alrady existing folder if one does
     terminate: inf # Specifies the time to wait before removing any service (after request processing). If '0', then any created service is removed directly after processing. If 'inf', then the service can wait forever. Otherwise, the service will remain for the spcified amount of time, then removed.
     set_function: # Function to use to process any request under current set. Thus, changing default request processing behavior (default bahavior is to keep incoming request, process them as containerized applications in a cluster, then transfer results to required destinations)
     data_dir: # Result from data management layer
      CRTS_SSSVariables:
       path: "/home/ubuntu/crts_data/CRTS_SSSVariables"
       schema: # TODO: May be important for data management. This node can point to other nodes (or document files) that contain detailed description of schema
       keywords: # TODO: May be important for data management and search for related data
     docker:         # Docker parameters for specific workflow
      docker_img:  #TODO: This can be a list of allowed images to run within this set. In this case, the user can select any of the allowed images, but nothing else, which may be important for security reasons (e.g., the institution is concerned with the images running at its side). If "any" is the first value in the list, this means that the end user can select any image 
       'shambakey1/vifi_astronomy' :
        registery: "https://hub.docker.com/r/shambakey1/vifi_astronomy/"
      docker_rep: "any"
      ttl: 3600  # If 'any', then user can specify whatever value. Otherwise, user specified value should not exceed this value
      user: 1000 # User to run docker commands as
      groups:        # List of groups that the container process will run as
      - 1000